#!/usr/bin/env python3

import argparse
from PIL import Image, UnidentifiedImageError
import os
from typing import Optional, Tuple, List
from multiprocessing import Pool, cpu_count

# Check Pillow version and use appropriate LANCZOS alias
if hasattr(Image, 'Resampling'):
    LANCZOS = Image.Resampling.LANCZOS  # Pillow >= 9.1.0
else:
    LANCZOS = Image.ANTIALIAS  # For earlier versions of Pillow


def change_image_format(input_image_path: str, output_format: str, scale: Optional[Tuple[int, int]] = None) -> None:
    """
    Changes the format of an image, optionally scales it, and saves it in the same directory as the input file.

    :param input_image_path: Path to the input image file.
    :param output_format: The format to convert the image to (e.g., 'JPEG', 'PNG', 'BMP').
    :param scale: Tuple for resizing the image in the format (width, height). If None, no scaling is done.
    """
    try:
        base_name: str = os.path.splitext(os.path.basename(input_image_path))[0]
        directory: str = os.path.dirname(input_image_path)

        output_image_path: str = os.path.join(directory, f"{base_name}.{output_format.lower()}")

        with Image.open(input_image_path) as img:
            if scale:
                img = img.resize(scale, LANCZOS)  # Higher quality scaling
            img.save(output_image_path, format=output_format.upper())

        print(f"Successfully converted {input_image_path} to {output_format.upper()} at {output_image_path}")
        if scale:
            print(f"Image resized to {scale[0]}x{scale[1]} pixels")
    except UnidentifiedImageError:
        print(f"Error: {input_image_path} is not a valid image file.")
    except Exception as e:
        print(f"Error processing {input_image_path}: {e}")


def process_images_concurrently(image_tasks: List[Tuple[str, str, Optional[Tuple[int, int]]]]) -> None:
    """
    Process multiple images concurrently using multiprocessing.

    :param image_tasks: A list of tuples, each containing (input_image_path, output_format, scale).
    """
    with Pool(cpu_count()) as pool:
        pool.starmap(change_image_format, image_tasks)


if __name__ == "__main__":
    parser: argparse.ArgumentParser = argparse.ArgumentParser(
        description="Convert images to different formats, with optional resizing, using multiprocessing.")
    parser.add_argument("output_format", help="Desired output format (e.g., jpg, png, bmp).")
    parser.add_argument("input_image_paths", nargs='+', help="Paths to the input image files.")
    parser.add_argument("--scale", nargs=2, type=int, metavar=('width', 'height'),
                        help="Resize the image to the given width and height (e.g., --scale 800 600).")

    args: argparse.Namespace = parser.parse_args()

    scale_tuple: Optional[Tuple[int, int]] = tuple(args.scale) if args.scale else None
    image_tasks: List[Tuple[str, str, Optional[Tuple[int, int]]]] = [
        (image_path, args.output_format, scale_tuple) for image_path in args.input_image_paths
    ]

    process_images_concurrently(image_tasks)
