#!/bin/bash

DB_FILE="tasks.db"

# Initialize the SQLite database if it doesn't exist
initialize_db() {
    sqlite3 $DB_FILE <<EOF
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task TEXT NOT NULL,
        due_date TEXT,
        reminder_time TEXT
    );
EOF
}

# Function to add or edit a task dynamically
dynamic_task_input() {
    local task="$1"
    local due_date="$2"
    local reminder_time="$3"

    while true; do
        options="Task: ${task:-Not Set}\nDue Date: ${due_date:-Not Set}\nReminder Time: ${reminder_time:-Not Set}\nSave\nCancel"
        selected=$(echo -e "$options" | rofi -dmenu -p "Add/Modify Task" -format 'i')

        case $selected in
            0)  # Task input
                task=$(rofi -dmenu -p "Enter task" -mesg "Current: $task")
                ;;
            1)  # Due Date input
                due_date=$(rofi -dmenu -p "Enter due date (YYYY-MM-DD)" -mesg "Current: $due_date")
                ;;
            2)  # Reminder Time input
                reminder_time=$(rofi -dmenu -p "Enter reminder time (HH:MM)" -mesg "Current: $reminder_time")
                ;;
            3)  # Save the task
                if [ -n "$task" ]; then
                    echo "$task|$due_date|$reminder_time"
                    break
                else
                    notify-send "Error" "Task description is required."
                fi
                ;;
            4)  # Cancel
                notify-send "Cancelled" "Task creation/editing cancelled."
                exit 1
                ;;
        esac
    done
}

# Function to add a task
add_task() {
    task_info=$(dynamic_task_input)
    task=$(echo "$task_info" | cut -d'|' -f1)
    due_date=$(echo "$task_info" | cut -d'|' -f2)
    reminder_time=$(echo "$task_info" | cut -d'|' -f3)

    sqlite3 $DB_FILE "INSERT INTO tasks (task, due_date, reminder_time) VALUES ('$task', '$due_date', '$reminder_time');"
    notify-send "Task Added" "$task due on $due_date at $reminder_time"
}

# Improved function to list all tasks with better formatting
show_tasks() {
    tasks=$(sqlite3 $DB_FILE "SELECT id, task FROM tasks;")

    if [ -z "$tasks" ]; then
        notify-send "Task List" "No tasks available."
    else
        # Format tasks as Task Name | Due Date - Reminder Time
        formatted_tasks=$(sqlite3 $DB_FILE "SELECT id, task, due_date, reminder_time FROM tasks;" | \
            awk -F "|" '{printf "%s | %s - %s\n", $2, ($3 == "" ? "No due date" : $3), ($4 == "" ? "No reminder" : $4)}')

        echo "$formatted_tasks" | rofi -dmenu -p "Task List"
    fi
}

# Function to delete a task
delete_task() {
    tasks=$(sqlite3 $DB_FILE "SELECT id, task, due_date, reminder_time FROM tasks;" | sed 's/|/ - /g')
    selected=$(echo "$tasks" | rofi -dmenu -p "Select Task to Delete")
    task_id=$(echo "$selected" | cut -d' ' -f1)

    if [ -n "$task_id" ]; then
        sqlite3 $DB_FILE "DELETE FROM tasks WHERE id=$task_id;"
        notify-send "Task Deleted" "Task ID $task_id deleted"
    fi
}

# Function to edit a task (shows previous data)
edit_task() {
    tasks=$(sqlite3 $DB_FILE "SELECT id, task, due_date, reminder_time FROM tasks;" | sed 's/|/ - /g')
    selected=$(echo "$tasks" | rofi -dmenu -p "Select Task to Edit")
    task_id=$(echo "$selected" | cut -d' ' -f1)

    # Fetch current task info
    current_task=$(sqlite3 $DB_FILE "SELECT task, due_date, reminder_time FROM tasks WHERE id=$task_id;")
    task=$(echo "$current_task" | cut -d'|' -f1)
    due_date=$(echo "$current_task" | cut -d'|' -f2)
    reminder_time=$(echo "$current_task" | cut -d'|' -f3)

    # Show previous data in dynamic input
    task_info=$(dynamic_task_input "$task" "$due_date" "$reminder_time")
    new_task=$(echo "$task_info" | cut -d'|' -f1)
    new_due_date=$(echo "$task_info" | cut -d'|' -f2)
    new_reminder_time=$(echo "$task_info" | cut -d'|' -f3)

    if [ -n "$new_task" ]; then
        sqlite3 $DB_FILE "UPDATE tasks SET task='$new_task', due_date='$new_due_date', reminder_time='$new_reminder_time' WHERE id=$task_id;"
        notify-send "Task Updated" "Task ID $task_id updated"
    fi
}

# Function to check reminders and send notifications
check_reminders() {
    while true; do
        current_time=$(date "+%H:%M")
        tasks=$(sqlite3 $DB_FILE "SELECT task FROM tasks WHERE reminder_time='$current_time';")
        if [ -n "$tasks" ]; then
            for task in $tasks; do
                notify-send "Reminder" "$task"
                paplay /usr/share/sounds/freedesktop/stereo/complete.oga # Play notification sound
            done
        fi

        sleep 60 # Check every minute
    done
}

# Function to display the task manager options
options_menu() {
    options="Show Tasks\nAdd Task\nDelete Task\nEdit Task\nCheck Reminders"

    selected=$(echo -e "$options" | rofi -dmenu -p "Task Manager")

    case $selected in
        "Show Tasks")
            show_tasks
            ;;
        "Add Task")
            add_task
            ;;
        "Delete Task")
            delete_task
            ;;
        "Edit Task")
            edit_task
            ;;
        "Check Reminders")
            check_reminders
            ;;
        *)
            notify-send "Invalid Option" "Please select a valid option."
            ;;
    esac
}

# Parse command-line arguments
case $1 in
    --show)
        show_tasks
        ;;
    --options)
        options_menu
        ;;
    --reminder)
        check_reminders
        ;;
    *)
        echo "Usage: $0 --show | --options | --reminder"
        ;;
esac
